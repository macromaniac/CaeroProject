package away3d.materials.compilation;

extern class ShaderCompiler {
	var UVSource(default,never) : String;
	var UVTarget(default,never) : String;
	var alphaPremultiplied : Bool;
	var animatableAttributes(default,never) : flash.Vector<String>;
	var animateUVs : Bool;
	var animationTargetRegisters(default,never) : flash.Vector<String>;
	var cameraPositionIndex(default,never) : Int;
	var commonsDataIndex(default,never) : Int;
	var diffuseLightSources : UInt;
	var enableLightFallOff : Bool;
	var forceSeperateMVP : Bool;
	var fragmentCode(default,never) : String;
	var fragmentLightCode(default,never) : String;
	var fragmentPostLightCode(default,never) : String;
	var lightFragmentConstantIndex(default,never) : Int;
	var lightProbeDiffuseIndices(default,never) : flash.Vector<UInt>;
	var lightProbeSpecularIndices(default,never) : flash.Vector<UInt>;
	var methodSetup : away3d.materials.methods.ShaderMethodSetup;
	var needUVAnimation(default,never) : Bool;
	var normalBufferIndex(default,never) : Int;
	var numDirectionalLights : UInt;
	var numLightProbes : UInt;
	var numPointLights : UInt;
	var numUsedFragmentConstants(default,never) : UInt;
	var numUsedStreams(default,never) : UInt;
	var numUsedTextures(default,never) : UInt;
	var numUsedVaryings(default,never) : UInt;
	var numUsedVertexConstants(default,never) : UInt;
	var preserveAlpha : Bool;
	var probeWeightsIndex(default,never) : Int;
	var sceneMatrixIndex(default,never) : Int;
	var sceneNormalMatrixIndex(default,never) : Int;
	var secondaryUVBufferIndex(default,never) : Int;
	var shadedTarget(default,never) : String;
	var specularLightSources : UInt;
	var tangentBufferIndex(default,never) : Int;
	var usesNormals(default,never) : Bool;
	var usingSpecularMethod(default,never) : Bool;
	var uvBufferIndex(default,never) : Int;
	var uvTransformIndex(default,never) : Int;
	var vertexCode(default,never) : String;
	function new(p1 : String) : Void;
	function compile() : Void;
	function dispose() : Void;
	function setConstantDataBuffers(p1 : flash.Vector<Float>, p2 : flash.Vector<Float>) : Void;
	function setTextureSampling(p1 : Bool, p2 : Bool, p3 : Bool) : Void;
}
